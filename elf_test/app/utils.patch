diff --git a/src/utils.rs b/src/utils.rs
index ca99afd..3c9a04c 100644
--- a/src/utils.rs
+++ b/src/utils.rs
@@ -1,3 +1,6 @@
+
+use std::io::Error;
+
 #[macro_export]
 macro_rules! read_u16 {
     ($elf:ident, $io:ident) => ({
@@ -5,8 +8,8 @@ macro_rules! read_u16 {
         match $elf.ehdr.data {
             types::ELFDATA2LSB => { $io.read_u16::<LittleEndian>() }
             types::ELFDATA2MSB => { $io.read_u16::<BigEndian>() }
-            types::ELFDATANONE => { panic!("Unable to resolve file endianness"); }
-            _ => { panic!("Unable to resolve file endianness"); }
+            types::ELFDATANONE => { Err(io::Error::new(io::ErrorKind::Other,"Unable to resolve file endianness")) }
+            _ => { Err(io::Error::new(io::ErrorKind::Other,"Unable to resolve file endianness")) }
         }
     });
 }
@@ -18,8 +21,8 @@ macro_rules! read_u32 {
         match $elf.ehdr.data {
             types::ELFDATA2LSB => { $io.read_u32::<LittleEndian>() }
             types::ELFDATA2MSB => { $io.read_u32::<BigEndian>() }
-            types::ELFDATANONE => { panic!("Unable to resolve file endianness"); }
-            _ => { panic!("Unable to resolve file endianness"); }
+            types::ELFDATANONE => { Err(io::Error::new(io::ErrorKind::Other,"Unable to resolve file endianness")) }
+            _ => { Err(io::Error::new(io::ErrorKind::Other,"Unable to resolve file endianness")) }
         }
     });
 }
@@ -31,8 +34,8 @@ macro_rules! read_u64 {
         match $elf.ehdr.data {
             types::ELFDATA2LSB => { $io.read_u64::<LittleEndian>() }
             types::ELFDATA2MSB => { $io.read_u64::<BigEndian>() }
-            types::ELFDATANONE => { panic!("Unable to resolve file endianness"); }
-            _ => { panic!("Unable to resolve file endianness"); }
+            types::ELFDATANONE => { Err(io::Error::new(io::ErrorKind::Other,"Unable to resolve file endianness")) }
+            _ => { Err(io::Error::new(io::ErrorKind::Other,"Unable to resolve file endianness")) }
         }
     });
 }
